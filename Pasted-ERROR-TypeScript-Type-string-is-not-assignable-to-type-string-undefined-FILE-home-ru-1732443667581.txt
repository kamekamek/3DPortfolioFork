ERROR(TypeScript)  Type 'string' is not assignable to type '(string | undefined)[]'.
 FILE  /home/runner/3DShowcasePortfolio-1/client/src/components/ProjectForm.tsx:43:7

    41 |       image: initialData?.image || "",
    42 |       link: initialData?.link || "",
  > 43 |       technologies: initialData?.technologies?.join(", ") || "",
       |       ^^^^^^^^^^^^
    44 |     },
    45 |   });
    46 |

 ERROR(TypeScript)  Type 'string' is not assignable to type 'number'.
 FILE  /home/runner/3DShowcasePortfolio-1/client/src/components/scene/ProjectCard.tsx:56:9

    54 |     if (meshRef.current) {
    55 |       updateTransform.mutate({
  > 56 |         id: project.id,
       |         ^^
    57 |         position: [
    58 |           meshRef.current.position.x,
    59 |           meshRef.current.position.y,

 ERROR(TypeScript)  Property '$drizzleTypeError' is missing in type 'ZodString' but required in type 'DrizzleTypeError<"Column 'password' does not exist in table 'users'">'.
 FILE  /home/runner/3DShowcasePortfolio-1/db/schema.ts:38:3

    36 | export const insertUserSchema = createInsertSchema(users, {
    37 |   email: z.string().email(),
  > 38 |   password: z.string().min(6),
       |   ^^^^^^^^
    39 | });
    40 | export const selectUserSchema = createSelectSchema(users);
    41 | export type InsertUser = z.infer<typeof insertUserSchema>;

 ERROR(TypeScript)  No overload matches this call.
  Overload 1 of 3, '(left: PgColumn<{ name: "id"; tableName: "users"; dataType: "string"; columnType: "PgUUID"; data: string; driverParam: string; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>, right: string | SQLWrapper): SQL<...>', gave the following error.
    Argument of type 'number' is not assignable to parameter of type 'string | SQLWrapper'.
  Overload 2 of 3, '(left: Aliased<number>, right: number | SQLWrapper): SQL<unknown>', gave the following error.
    Argument of type 'PgColumn<{ name: "id"; tableName: "users"; dataType: "string"; columnType: "PgUUID"; data: string; driverParam: string; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; hasRuntimeDefault: false; enumValues: undefined; baseColumn: never; identity: undefined; generated: undefined; }, {}, {}>' is not assignable to parameter of type 'Aliased<number>'.
      Type 'PgColumn<{ name: "id"; tableName: "users"; dataType: "string"; columnType: "PgUUID"; data: string; driverParam: string; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; hasRuntimeDefault: false; enumValues: undefined; baseColumn: never; identity: undefined; generated: undefined; }, {}, {}>' is missing the following properties from type 'Aliased<number>': sql, fieldAlias
  Overload 3 of 3, '(left: never, right: unknown): SQL<unknown>', gave the following error.
    Argument of type 'PgColumn<{ name: "id"; tableName: "users"; dataType: "string"; columnType: "PgUUID"; data: string; driverParam: string; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; hasRuntimeDefault: false; enumValues: undefined; baseColumn: never; identity: undefined; generated: undefined; }, {}, {}>' is not assignable to parameter of type 'never'.
 FILE  /home/runner/3DShowcasePortfolio-1/server/auth.ts:33:14

    31 |       .select()
    32 |       .from(users)
  > 33 |       .where(eq(users.id, decoded.userId))
       |              ^^
    34 |       .limit(1);
    35 |     
    36 |     return user || null;

 ERROR(TypeScript)  Property 'passwordHash' does not exist on type '{ id: string; name: string; email: string; createdAt: Date | null; }'.
 FILE  /home/runner/3DShowcasePortfolio-1/server/routes.ts:58:61

    56 |       }
    57 |
  > 58 |       const isValid = await comparePasswords(password, user.passwordHash);
       |                                                             ^^^^^^^^^^^^
    59 |       if (!isValid) {
    60 |         return res.status(401).json({ message: "メールアドレスまたはパスワードが正しくありません" });
    61 |       }

[TypeScript] Found 5 errors. Watching for file changes.